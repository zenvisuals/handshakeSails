<!DOCTYPE html>
<html>
  <head>
    <title>Handshake App</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->

    <link rel="stylesheet" href="/styles/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/signin.css">
    <link rel="stylesheet" href="/styles/jquery-ui.min.css">
    <link rel="stylesheet" href="/styles/jquery-ui.structure.min.css">

    <!--STYLES END-->
    <link href="styles/full-width-pics.css" rel="stylesheet">
    <script src="/js/dependencies/_jquery.js"></script>
    <script src="/js/jquery-ui.min.js"></script>
    <script src="/js/underscore-min.js"></script>
  </head>

  <body>
      <nav class="navbar navbar-inverse navbar-fixed-top">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <p class="navbar-brand"><strong>Sonder</strong></p>
    </div>
    <% if(req.session && req.session.passport && req.session.passport.user) { %>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav">
        <li class="active"><a href="/">Home <span class="sr-only">(current)</span></a></li>
        <li><a href="/contact/<%= req.session.passport.user %>">Contacts</a></li>
        <li><a href="/handshake/<%= req.session.passport.user %>">Handshake</a><li>
        <li><a href="/profile/<%= req.session.passport.user %>/linkedin">Profile</a><li>
      </ul>
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/logout">Logout</a></li>
      </ul>
      <% } else { %>
        <form class="navbar-form navbar-right" role="search">
        <div class="form-group ui-widget">
          <input id="tags" type="text" class="form-control" placeholder="Companies, Designations or Industries">
        </div>
      </form>
        <ul class="nav navbar-nav navbar-right">
          <li><a href="/login">Sign in</a></li>
          <li><a href="/register">Register</a></li>
        </ul>
        <% } %>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->

    <!--TEMPLATES END-->
    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/bootstrap.min.js"></script>
    <!--SCRIPTS END-->
    <!--JQUERY AUTOCOMPLETE -->
    <script>
    //widget render custom
    $.widget( "custom.catcomplete", $.ui.autocomplete, {
      _create: function() {
        this._super();
        this.widget().menu( "option", "items", "> :not(.ui-autocomplete-category)" );
      },
      _renderMenu: function( ul, items ) {
        var that = this,
          currentCategory = "";
        $.each( items, function( index, item ) {
          var li;
          if ( item.category != currentCategory ) {
            ul.append( "<li class='ui-autocomplete-category'>" + item.category + "</li>" );
            currentCategory = item.category;
          }
          li = that._renderItemData( ul, item );
          if ( item.category ) {
            li.attr( "aria-label", item.category + " : " + item.label );
          }
        });
      }
    });
    $(function() {
      function split( val ) {
        return val.split( /,\s*/ );
      }
      function extractLast( term ) {
        return split( term ).pop();
      }

      $( "#tags" )
        // don't navigate away from the field on tab when selecting an item
        .bind( "keydown", function( event ) {
          if ( event.keyCode === $.ui.keyCode.TAB &&
              $( this ).autocomplete( "instance" ).menu.active ) {
            event.preventDefault();
          }
        })
        .catcomplete({
          source: function( request, response ) {
            console.log(request);
            var getCompanies = $.getJSON("./company", {company: request.term});
            var getDesignations = $.getJSON("./designation", {designation: request.term});
            var getIndustries = $.getJSON("./industry", {industry: request.term});
            $.when(getCompanies, getDesignations, getIndustries).done(
              function(companies, designations, industries){
                var _companies, _designations, _industries;
                if(companies[0]) {
                  _companies = $.map(companies[0], function(label){
                    return {label: label, category: "Companies"};
                  });
                }
                if(designations[0]){
                  _designations = $.map(designations[0], function(label){
                    return {label: label, category: "Designations"};
                  });
                }
                if(industries[0]) {
                  _industries = $.map(industries[0], function(label){
                    return {label: label, category: "Industries"};
                  });
                }

                var alldata = _.union(_companies, _designations, _industries);
                response(alldata);
              })
          },
          search: function() {
            // custom minLength
            var term = extractLast( this.value );
            if ( term.length < 2 ) {
              return false;
            }
          },
          focus: function() {
            // prevent value inserted on focus
            return false;
          },
          select: function( event, ui ) {
            var terms = split( this.value );
            // remove the current input
            terms.pop();
            // add the selected item
            terms.push( ui.item.value );
            // add placeholder to get the comma-and-space at the end
            terms.push( "" );
            this.value = terms.join( ", " );
            return false;
          }
        });
    });
    </script>


  </body>
</html>
